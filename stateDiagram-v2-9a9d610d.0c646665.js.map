{"mappings":"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","sources":["<anon>","node_modules/mermaid/dist/stateDiagram-v2-9a9d610d.js","node_modules/lodash-es/clone.js"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequiree2db\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"3uAE3\", function(module, exports) {\n\n$parcel$export(module.exports, \"diagram\", function () { return $28b09967c0dce656$export$6118d022d940d562; });\n\nvar $hMcdm = parcelRequire(\"hMcdm\");\n\nvar $1t9cm = parcelRequire(\"1t9cm\");\n\nvar $76wyh = parcelRequire(\"76wyh\");\n\nvar $ewvVJ = parcelRequire(\"ewvVJ\");\n\nvar $Knj1d = parcelRequire(\"Knj1d\");\n\nvar $5GUWQ = parcelRequire(\"5GUWQ\");\n\nvar $3GDLI = parcelRequire(\"3GDLI\");\nparcelRequire(\"6fO6W\");\nparcelRequire(\"biwpL\");\nparcelRequire(\"gyk94\");\nparcelRequire(\"cDk4l\");\n\n\n\n\n\nparcelRequire(\"1RzZk\");\nparcelRequire(\"9miRt\");\n\n\n\nvar $28b09967c0dce656$var$SHAPE_STATE = \"rect\";\nvar $28b09967c0dce656$var$SHAPE_STATE_WITH_DESC = \"rectWithTitle\";\nvar $28b09967c0dce656$var$SHAPE_START = \"start\";\nvar $28b09967c0dce656$var$SHAPE_END = \"end\";\nvar $28b09967c0dce656$var$SHAPE_DIVIDER = \"divider\";\nvar $28b09967c0dce656$var$SHAPE_GROUP = \"roundedWithTitle\";\nvar $28b09967c0dce656$var$SHAPE_NOTE = \"note\";\nvar $28b09967c0dce656$var$SHAPE_NOTEGROUP = \"noteGroup\";\nvar $28b09967c0dce656$var$CSS_DIAGRAM = \"statediagram\";\nvar $28b09967c0dce656$var$CSS_STATE = \"state\";\nvar $28b09967c0dce656$var$CSS_DIAGRAM_STATE = \"\".concat($28b09967c0dce656$var$CSS_DIAGRAM, \"-\").concat($28b09967c0dce656$var$CSS_STATE);\nvar $28b09967c0dce656$var$CSS_EDGE = \"transition\";\nvar $28b09967c0dce656$var$CSS_NOTE = \"note\";\nvar $28b09967c0dce656$var$CSS_NOTE_EDGE = \"note-edge\";\nvar $28b09967c0dce656$var$CSS_EDGE_NOTE_EDGE = \"\".concat($28b09967c0dce656$var$CSS_EDGE, \" \").concat($28b09967c0dce656$var$CSS_NOTE_EDGE);\nvar $28b09967c0dce656$var$CSS_DIAGRAM_NOTE = \"\".concat($28b09967c0dce656$var$CSS_DIAGRAM, \"-\").concat($28b09967c0dce656$var$CSS_NOTE);\nvar $28b09967c0dce656$var$CSS_CLUSTER = \"cluster\";\nvar $28b09967c0dce656$var$CSS_DIAGRAM_CLUSTER = \"\".concat($28b09967c0dce656$var$CSS_DIAGRAM, \"-\").concat($28b09967c0dce656$var$CSS_CLUSTER);\nvar $28b09967c0dce656$var$CSS_CLUSTER_ALT = \"cluster-alt\";\nvar $28b09967c0dce656$var$CSS_DIAGRAM_CLUSTER_ALT = \"\".concat($28b09967c0dce656$var$CSS_DIAGRAM, \"-\").concat($28b09967c0dce656$var$CSS_CLUSTER_ALT);\nvar $28b09967c0dce656$var$PARENT = \"parent\";\nvar $28b09967c0dce656$var$NOTE = \"note\";\nvar $28b09967c0dce656$var$DOMID_STATE = \"state\";\nvar $28b09967c0dce656$var$DOMID_TYPE_SPACER = \"----\";\nvar $28b09967c0dce656$var$NOTE_ID = \"\".concat($28b09967c0dce656$var$DOMID_TYPE_SPACER).concat($28b09967c0dce656$var$NOTE);\nvar $28b09967c0dce656$var$PARENT_ID = \"\".concat($28b09967c0dce656$var$DOMID_TYPE_SPACER).concat($28b09967c0dce656$var$PARENT);\nvar $28b09967c0dce656$var$G_EDGE_STYLE = \"fill:none\";\nvar $28b09967c0dce656$var$G_EDGE_ARROWHEADSTYLE = \"fill: #333\";\nvar $28b09967c0dce656$var$G_EDGE_LABELPOS = \"c\";\nvar $28b09967c0dce656$var$G_EDGE_LABELTYPE = \"text\";\nvar $28b09967c0dce656$var$G_EDGE_THICKNESS = \"normal\";\nvar $28b09967c0dce656$var$nodeDb = {};\nvar $28b09967c0dce656$var$graphItemCount = 0;\nvar $28b09967c0dce656$var$setConf = function setConf(cnf) {\n    var keys = Object.keys(cnf);\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var key = _step.value;\n            cnf[key];\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n};\nvar $28b09967c0dce656$var$getClasses = function getClasses(text, diagramObj) {\n    diagramObj.db.extract(diagramObj.db.getRootDocV2());\n    return diagramObj.db.getClasses();\n};\nfunction $28b09967c0dce656$var$getClassesFromDbInfo(dbInfoItem) {\n    if (dbInfoItem === void 0 || dbInfoItem === null) return \"\";\n    else {\n        if (dbInfoItem.classes) return dbInfoItem.classes.join(\" \");\n        else return \"\";\n    }\n}\nfunction $28b09967c0dce656$var$stateDomId() {\n    var itemId = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\", counter = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, type = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"\", typeSpacer = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : $28b09967c0dce656$var$DOMID_TYPE_SPACER;\n    var typeStr = type !== null && type.length > 0 ? \"\".concat(typeSpacer).concat(type) : \"\";\n    return \"\".concat($28b09967c0dce656$var$DOMID_STATE, \"-\").concat(itemId).concat(typeStr, \"-\").concat(counter);\n}\nvar $28b09967c0dce656$var$setupNode = function(g, parent, parsedItem, diagramStates, diagramDb, altFlag) {\n    var itemId = parsedItem.id;\n    var classStr = $28b09967c0dce656$var$getClassesFromDbInfo(diagramStates[itemId]);\n    if (itemId !== \"root\") {\n        var shape = $28b09967c0dce656$var$SHAPE_STATE;\n        if (parsedItem.start === true) shape = $28b09967c0dce656$var$SHAPE_START;\n        if (parsedItem.start === false) shape = $28b09967c0dce656$var$SHAPE_END;\n        if (parsedItem.type !== (0, $76wyh.D)) shape = parsedItem.type;\n        if (!$28b09967c0dce656$var$nodeDb[itemId]) $28b09967c0dce656$var$nodeDb[itemId] = {\n            id: itemId,\n            shape: shape,\n            description: (0, $5GUWQ.e).sanitizeText(itemId, (0, $5GUWQ.c)()),\n            classes: \"\".concat(classStr, \" \").concat($28b09967c0dce656$var$CSS_DIAGRAM_STATE)\n        };\n        var newNode = $28b09967c0dce656$var$nodeDb[itemId];\n        if (parsedItem.description) {\n            if (Array.isArray(newNode.description)) {\n                newNode.shape = $28b09967c0dce656$var$SHAPE_STATE_WITH_DESC;\n                newNode.description.push(parsedItem.description);\n            } else if (newNode.description.length > 0) {\n                newNode.shape = $28b09967c0dce656$var$SHAPE_STATE_WITH_DESC;\n                if (newNode.description === itemId) newNode.description = [\n                    parsedItem.description\n                ];\n                else newNode.description = [\n                    newNode.description,\n                    parsedItem.description\n                ];\n            } else {\n                newNode.shape = $28b09967c0dce656$var$SHAPE_STATE;\n                newNode.description = parsedItem.description;\n            }\n            newNode.description = (0, $5GUWQ.e).sanitizeTextOrArray(newNode.description, (0, $5GUWQ.c)());\n        }\n        if (newNode.description.length === 1 && newNode.shape === $28b09967c0dce656$var$SHAPE_STATE_WITH_DESC) newNode.shape = $28b09967c0dce656$var$SHAPE_STATE;\n        if (!newNode.type && parsedItem.doc) {\n            (0, $5GUWQ.l).info(\"Setting cluster for \", itemId, $28b09967c0dce656$var$getDir(parsedItem));\n            newNode.type = \"group\";\n            newNode.dir = $28b09967c0dce656$var$getDir(parsedItem);\n            newNode.shape = parsedItem.type === (0, $76wyh.a) ? $28b09967c0dce656$var$SHAPE_DIVIDER : $28b09967c0dce656$var$SHAPE_GROUP;\n            newNode.classes = newNode.classes + \" \" + $28b09967c0dce656$var$CSS_DIAGRAM_CLUSTER + \" \" + (altFlag ? $28b09967c0dce656$var$CSS_DIAGRAM_CLUSTER_ALT : \"\");\n        }\n        var nodeData = {\n            labelStyle: \"\",\n            shape: newNode.shape,\n            labelText: newNode.description,\n            // typeof newNode.description === 'object'\n            //   ? newNode.description[0]\n            //   : newNode.description,\n            classes: newNode.classes,\n            style: \"\",\n            //styles.style,\n            id: itemId,\n            dir: newNode.dir,\n            domId: $28b09967c0dce656$var$stateDomId(itemId, $28b09967c0dce656$var$graphItemCount),\n            type: newNode.type,\n            padding: 15\n        };\n        nodeData.centerLabel = true;\n        if (parsedItem.note) {\n            var noteData = {\n                labelStyle: \"\",\n                shape: $28b09967c0dce656$var$SHAPE_NOTE,\n                labelText: parsedItem.note.text,\n                classes: $28b09967c0dce656$var$CSS_DIAGRAM_NOTE,\n                // useHtmlLabels: false,\n                style: \"\",\n                // styles.style,\n                id: itemId + $28b09967c0dce656$var$NOTE_ID + \"-\" + $28b09967c0dce656$var$graphItemCount,\n                domId: $28b09967c0dce656$var$stateDomId(itemId, $28b09967c0dce656$var$graphItemCount, $28b09967c0dce656$var$NOTE),\n                type: newNode.type,\n                padding: 15\n            };\n            var groupData = {\n                labelStyle: \"\",\n                shape: $28b09967c0dce656$var$SHAPE_NOTEGROUP,\n                labelText: parsedItem.note.text,\n                classes: newNode.classes,\n                style: \"\",\n                // styles.style,\n                id: itemId + $28b09967c0dce656$var$PARENT_ID,\n                domId: $28b09967c0dce656$var$stateDomId(itemId, $28b09967c0dce656$var$graphItemCount, $28b09967c0dce656$var$PARENT),\n                type: \"group\",\n                padding: 0\n            };\n            $28b09967c0dce656$var$graphItemCount++;\n            var parentNodeId = itemId + $28b09967c0dce656$var$PARENT_ID;\n            g.setNode(parentNodeId, groupData);\n            g.setNode(noteData.id, noteData);\n            g.setNode(itemId, nodeData);\n            g.setParent(itemId, parentNodeId);\n            g.setParent(noteData.id, parentNodeId);\n            var from = itemId;\n            var to = noteData.id;\n            if (parsedItem.note.position === \"left of\") {\n                from = noteData.id;\n                to = itemId;\n            }\n            g.setEdge(from, to, {\n                arrowhead: \"none\",\n                arrowType: \"\",\n                style: $28b09967c0dce656$var$G_EDGE_STYLE,\n                labelStyle: \"\",\n                classes: $28b09967c0dce656$var$CSS_EDGE_NOTE_EDGE,\n                arrowheadStyle: $28b09967c0dce656$var$G_EDGE_ARROWHEADSTYLE,\n                labelpos: $28b09967c0dce656$var$G_EDGE_LABELPOS,\n                labelType: $28b09967c0dce656$var$G_EDGE_LABELTYPE,\n                thickness: $28b09967c0dce656$var$G_EDGE_THICKNESS\n            });\n        } else g.setNode(itemId, nodeData);\n    }\n    if (parent && parent.id !== \"root\") {\n        (0, $5GUWQ.l).trace(\"Setting node \", itemId, \" to be child of its parent \", parent.id);\n        g.setParent(itemId, parent.id);\n    }\n    if (parsedItem.doc) {\n        (0, $5GUWQ.l).trace(\"Adding nodes children \");\n        $28b09967c0dce656$var$setupDoc(g, parsedItem, parsedItem.doc, diagramStates, diagramDb, !altFlag);\n    }\n};\nvar $28b09967c0dce656$var$setupDoc = function(g, parentParsedItem, doc, diagramStates, diagramDb, altFlag) {\n    (0, $5GUWQ.l).trace(\"items\", doc);\n    doc.forEach(function(item) {\n        switch(item.stmt){\n            case 0, $76wyh.b:\n                $28b09967c0dce656$var$setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n                break;\n            case 0, $76wyh.D:\n                $28b09967c0dce656$var$setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n                break;\n            case 0, $76wyh.S:\n                {\n                    $28b09967c0dce656$var$setupNode(g, parentParsedItem, item.state1, diagramStates, diagramDb, altFlag);\n                    $28b09967c0dce656$var$setupNode(g, parentParsedItem, item.state2, diagramStates, diagramDb, altFlag);\n                    var edgeData = {\n                        id: \"edge\" + $28b09967c0dce656$var$graphItemCount,\n                        arrowhead: \"normal\",\n                        arrowTypeEnd: \"arrow_barb\",\n                        style: $28b09967c0dce656$var$G_EDGE_STYLE,\n                        labelStyle: \"\",\n                        label: (0, $5GUWQ.e).sanitizeText(item.description, (0, $5GUWQ.c)()),\n                        arrowheadStyle: $28b09967c0dce656$var$G_EDGE_ARROWHEADSTYLE,\n                        labelpos: $28b09967c0dce656$var$G_EDGE_LABELPOS,\n                        labelType: $28b09967c0dce656$var$G_EDGE_LABELTYPE,\n                        thickness: $28b09967c0dce656$var$G_EDGE_THICKNESS,\n                        classes: $28b09967c0dce656$var$CSS_EDGE\n                    };\n                    g.setEdge(item.state1.id, item.state2.id, edgeData, $28b09967c0dce656$var$graphItemCount);\n                    $28b09967c0dce656$var$graphItemCount++;\n                }\n                break;\n        }\n    });\n};\nvar $28b09967c0dce656$var$getDir = function(parsedItem) {\n    var defaultDir = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : (0, $76wyh.c);\n    var dir = defaultDir;\n    if (parsedItem.doc) for(var i = 0; i < parsedItem.doc.length; i++){\n        var parsedItemDoc = parsedItem.doc[i];\n        if (parsedItemDoc.stmt === \"dir\") dir = parsedItemDoc.value;\n    }\n    return dir;\n};\nvar $28b09967c0dce656$var$draw = function() {\n    var _ref = (0, $hMcdm._)(function(text, id, _version, diag) {\n        var _getConfig, securityLevel, conf, nodeSpacing, rankSpacing, diagramStates, g, sandboxElement, root, svg, element, padding, bounds, width, height, svgBounds, vBox, labels, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, label, dim, rect;\n        return (0, $1t9cm.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    (0, $5GUWQ.l).info(\"Drawing state diagram (v2)\", id);\n                    $28b09967c0dce656$var$nodeDb = {};\n                    diag.db.getDirection();\n                    _getConfig = (0, $5GUWQ.c)(), securityLevel = _getConfig.securityLevel, conf = _getConfig.state;\n                    nodeSpacing = conf.nodeSpacing || 50;\n                    rankSpacing = conf.rankSpacing || 50;\n                    (0, $5GUWQ.l).info(diag.db.getRootDocV2());\n                    diag.db.extract(diag.db.getRootDocV2());\n                    (0, $5GUWQ.l).info(diag.db.getRootDocV2());\n                    diagramStates = diag.db.getStates();\n                    g = new $ewvVJ.Graph({\n                        multigraph: true,\n                        compound: true\n                    }).setGraph({\n                        rankdir: $28b09967c0dce656$var$getDir(diag.db.getRootDocV2()),\n                        nodesep: nodeSpacing,\n                        ranksep: rankSpacing,\n                        marginx: 8,\n                        marginy: 8\n                    }).setDefaultEdgeLabel(function() {\n                        return {};\n                    });\n                    $28b09967c0dce656$var$setupNode(g, void 0, diag.db.getRootDocV2(), diagramStates, diag.db, true);\n                    if (securityLevel === \"sandbox\") sandboxElement = (0, $Knj1d.select)(\"#i\" + id);\n                    root = securityLevel === \"sandbox\" ? (0, $Knj1d.select)(sandboxElement.nodes()[0].contentDocument.body) : (0, $Knj1d.select)(\"body\");\n                    svg = root.select('[id=\"'.concat(id, '\"]'));\n                    element = root.select(\"#\" + id + \" g\");\n                    return [\n                        4,\n                        (0, $3GDLI.r)(element, g, [\n                            \"barb\"\n                        ], $28b09967c0dce656$var$CSS_DIAGRAM, id)\n                    ];\n                case 1:\n                    _state.sent();\n                    padding = 8;\n                    (0, $5GUWQ.u).insertTitle(svg, \"statediagramTitleText\", conf.titleTopMargin, diag.db.getDiagramTitle());\n                    bounds = svg.node().getBBox();\n                    width = bounds.width + padding * 2;\n                    height = bounds.height + padding * 2;\n                    svg.attr(\"class\", $28b09967c0dce656$var$CSS_DIAGRAM);\n                    svgBounds = svg.node().getBBox();\n                    (0, $5GUWQ.i)(svg, height, width, conf.useMaxWidth);\n                    vBox = \"\".concat(svgBounds.x - padding, \" \").concat(svgBounds.y - padding, \" \").concat(width, \" \").concat(height);\n                    (0, $5GUWQ.l).debug(\"viewBox \".concat(vBox));\n                    svg.attr(\"viewBox\", vBox);\n                    labels = document.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n                    _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                    try {\n                        for(_iterator = labels[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                            label = _step.value;\n                            dim = label.getBBox();\n                            rect = document.createElementNS(\"http://www.w3.org/2000/svg\", $28b09967c0dce656$var$SHAPE_STATE);\n                            rect.setAttribute(\"rx\", 0);\n                            rect.setAttribute(\"ry\", 0);\n                            rect.setAttribute(\"width\", dim.width);\n                            rect.setAttribute(\"height\", dim.height);\n                            label.insertBefore(rect, label.firstChild);\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                _iterator.return();\n                            }\n                        } finally{\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return function draw(text, id, _version, diag) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar $28b09967c0dce656$var$renderer = {\n    setConf: $28b09967c0dce656$var$setConf,\n    getClasses: $28b09967c0dce656$var$getClasses,\n    draw: $28b09967c0dce656$var$draw\n};\nvar $28b09967c0dce656$export$6118d022d940d562 = {\n    parser: (0, $76wyh.p),\n    db: (0, $76wyh.d),\n    renderer: $28b09967c0dce656$var$renderer,\n    styles: (0, $76wyh.s),\n    init: function(cnf) {\n        if (!cnf.state) cnf.state = {};\n        cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n        (0, $76wyh.d).clear();\n    }\n};\n\n});\n\nparcelRegister(\"gSezU\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $c48cff6abc2d2f72$export$2e2bcd8739ae039; });\n\nvar $fCUSH = parcelRequire(\"fCUSH\");\n/** Used to compose bitmasks for cloning. */ var $c48cff6abc2d2f72$var$CLONE_SYMBOLS_FLAG = 4;\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */ function $c48cff6abc2d2f72$var$clone(value) {\n    return (0, $fCUSH.default)(value, $c48cff6abc2d2f72$var$CLONE_SYMBOLS_FLAG);\n}\nvar $c48cff6abc2d2f72$export$2e2bcd8739ae039 = $c48cff6abc2d2f72$var$clone;\n\n});\n\n})();\n//# sourceMappingURL=stateDiagram-v2-9a9d610d.0c646665.js.map\n","import { D as DEFAULT_STATE_TYPE, a as DIVIDER_TYPE, S as STMT_RELATION, b as STMT_STATE, c as DEFAULT_NESTED_DOC_DIR, p as parser, d as db, s as styles } from \"./styles-d20c7d72.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { select } from \"d3\";\nimport { l as log, c as getConfig, u as utils, i as configureSvgSize, e as common } from \"./mermaid-f47111a7.js\";\nimport { r as render } from \"./index-fc10efb0.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nimport \"dagre-d3-es/src/dagre/index.js\";\nimport \"dagre-d3-es/src/graphlib/json.js\";\nimport \"./edges-d32062c0.js\";\nimport \"./createText-6b48ae7d.js\";\nimport \"mdast-util-from-markdown\";\nconst SHAPE_STATE = \"rect\";\nconst SHAPE_STATE_WITH_DESC = \"rectWithTitle\";\nconst SHAPE_START = \"start\";\nconst SHAPE_END = \"end\";\nconst SHAPE_DIVIDER = \"divider\";\nconst SHAPE_GROUP = \"roundedWithTitle\";\nconst SHAPE_NOTE = \"note\";\nconst SHAPE_NOTEGROUP = \"noteGroup\";\nconst CSS_DIAGRAM = \"statediagram\";\nconst CSS_STATE = \"state\";\nconst CSS_DIAGRAM_STATE = `${CSS_DIAGRAM}-${CSS_STATE}`;\nconst CSS_EDGE = \"transition\";\nconst CSS_NOTE = \"note\";\nconst CSS_NOTE_EDGE = \"note-edge\";\nconst CSS_EDGE_NOTE_EDGE = `${CSS_EDGE} ${CSS_NOTE_EDGE}`;\nconst CSS_DIAGRAM_NOTE = `${CSS_DIAGRAM}-${CSS_NOTE}`;\nconst CSS_CLUSTER = \"cluster\";\nconst CSS_DIAGRAM_CLUSTER = `${CSS_DIAGRAM}-${CSS_CLUSTER}`;\nconst CSS_CLUSTER_ALT = \"cluster-alt\";\nconst CSS_DIAGRAM_CLUSTER_ALT = `${CSS_DIAGRAM}-${CSS_CLUSTER_ALT}`;\nconst PARENT = \"parent\";\nconst NOTE = \"note\";\nconst DOMID_STATE = \"state\";\nconst DOMID_TYPE_SPACER = \"----\";\nconst NOTE_ID = `${DOMID_TYPE_SPACER}${NOTE}`;\nconst PARENT_ID = `${DOMID_TYPE_SPACER}${PARENT}`;\nconst G_EDGE_STYLE = \"fill:none\";\nconst G_EDGE_ARROWHEADSTYLE = \"fill: #333\";\nconst G_EDGE_LABELPOS = \"c\";\nconst G_EDGE_LABELTYPE = \"text\";\nconst G_EDGE_THICKNESS = \"normal\";\nlet nodeDb = {};\nlet graphItemCount = 0;\nconst setConf = function(cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    cnf[key];\n  }\n};\nconst getClasses = function(text, diagramObj) {\n  diagramObj.db.extract(diagramObj.db.getRootDocV2());\n  return diagramObj.db.getClasses();\n};\nfunction getClassesFromDbInfo(dbInfoItem) {\n  if (dbInfoItem === void 0 || dbInfoItem === null) {\n    return \"\";\n  } else {\n    if (dbInfoItem.classes) {\n      return dbInfoItem.classes.join(\" \");\n    } else {\n      return \"\";\n    }\n  }\n}\nfunction stateDomId(itemId = \"\", counter = 0, type = \"\", typeSpacer = DOMID_TYPE_SPACER) {\n  const typeStr = type !== null && type.length > 0 ? `${typeSpacer}${type}` : \"\";\n  return `${DOMID_STATE}-${itemId}${typeStr}-${counter}`;\n}\nconst setupNode = (g, parent, parsedItem, diagramStates, diagramDb, altFlag) => {\n  const itemId = parsedItem.id;\n  const classStr = getClassesFromDbInfo(diagramStates[itemId]);\n  if (itemId !== \"root\") {\n    let shape = SHAPE_STATE;\n    if (parsedItem.start === true) {\n      shape = SHAPE_START;\n    }\n    if (parsedItem.start === false) {\n      shape = SHAPE_END;\n    }\n    if (parsedItem.type !== DEFAULT_STATE_TYPE) {\n      shape = parsedItem.type;\n    }\n    if (!nodeDb[itemId]) {\n      nodeDb[itemId] = {\n        id: itemId,\n        shape,\n        description: common.sanitizeText(itemId, getConfig()),\n        classes: `${classStr} ${CSS_DIAGRAM_STATE}`\n      };\n    }\n    const newNode = nodeDb[itemId];\n    if (parsedItem.description) {\n      if (Array.isArray(newNode.description)) {\n        newNode.shape = SHAPE_STATE_WITH_DESC;\n        newNode.description.push(parsedItem.description);\n      } else {\n        if (newNode.description.length > 0) {\n          newNode.shape = SHAPE_STATE_WITH_DESC;\n          if (newNode.description === itemId) {\n            newNode.description = [parsedItem.description];\n          } else {\n            newNode.description = [newNode.description, parsedItem.description];\n          }\n        } else {\n          newNode.shape = SHAPE_STATE;\n          newNode.description = parsedItem.description;\n        }\n      }\n      newNode.description = common.sanitizeTextOrArray(newNode.description, getConfig());\n    }\n    if (newNode.description.length === 1 && newNode.shape === SHAPE_STATE_WITH_DESC) {\n      newNode.shape = SHAPE_STATE;\n    }\n    if (!newNode.type && parsedItem.doc) {\n      log.info(\"Setting cluster for \", itemId, getDir(parsedItem));\n      newNode.type = \"group\";\n      newNode.dir = getDir(parsedItem);\n      newNode.shape = parsedItem.type === DIVIDER_TYPE ? SHAPE_DIVIDER : SHAPE_GROUP;\n      newNode.classes = newNode.classes + \" \" + CSS_DIAGRAM_CLUSTER + \" \" + (altFlag ? CSS_DIAGRAM_CLUSTER_ALT : \"\");\n    }\n    const nodeData = {\n      labelStyle: \"\",\n      shape: newNode.shape,\n      labelText: newNode.description,\n      // typeof newNode.description === 'object'\n      //   ? newNode.description[0]\n      //   : newNode.description,\n      classes: newNode.classes,\n      style: \"\",\n      //styles.style,\n      id: itemId,\n      dir: newNode.dir,\n      domId: stateDomId(itemId, graphItemCount),\n      type: newNode.type,\n      padding: 15\n      //getConfig().flowchart.padding\n    };\n    nodeData.centerLabel = true;\n    if (parsedItem.note) {\n      const noteData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTE,\n        labelText: parsedItem.note.text,\n        classes: CSS_DIAGRAM_NOTE,\n        // useHtmlLabels: false,\n        style: \"\",\n        // styles.style,\n        id: itemId + NOTE_ID + \"-\" + graphItemCount,\n        domId: stateDomId(itemId, graphItemCount, NOTE),\n        type: newNode.type,\n        padding: 15\n        //getConfig().flowchart.padding\n      };\n      const groupData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTEGROUP,\n        labelText: parsedItem.note.text,\n        classes: newNode.classes,\n        style: \"\",\n        // styles.style,\n        id: itemId + PARENT_ID,\n        domId: stateDomId(itemId, graphItemCount, PARENT),\n        type: \"group\",\n        padding: 0\n        //getConfig().flowchart.padding\n      };\n      graphItemCount++;\n      const parentNodeId = itemId + PARENT_ID;\n      g.setNode(parentNodeId, groupData);\n      g.setNode(noteData.id, noteData);\n      g.setNode(itemId, nodeData);\n      g.setParent(itemId, parentNodeId);\n      g.setParent(noteData.id, parentNodeId);\n      let from = itemId;\n      let to = noteData.id;\n      if (parsedItem.note.position === \"left of\") {\n        from = noteData.id;\n        to = itemId;\n      }\n      g.setEdge(from, to, {\n        arrowhead: \"none\",\n        arrowType: \"\",\n        style: G_EDGE_STYLE,\n        labelStyle: \"\",\n        classes: CSS_EDGE_NOTE_EDGE,\n        arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n        labelpos: G_EDGE_LABELPOS,\n        labelType: G_EDGE_LABELTYPE,\n        thickness: G_EDGE_THICKNESS\n      });\n    } else {\n      g.setNode(itemId, nodeData);\n    }\n  }\n  if (parent && parent.id !== \"root\") {\n    log.trace(\"Setting node \", itemId, \" to be child of its parent \", parent.id);\n    g.setParent(itemId, parent.id);\n  }\n  if (parsedItem.doc) {\n    log.trace(\"Adding nodes children \");\n    setupDoc(g, parsedItem, parsedItem.doc, diagramStates, diagramDb, !altFlag);\n  }\n};\nconst setupDoc = (g, parentParsedItem, doc, diagramStates, diagramDb, altFlag) => {\n  log.trace(\"items\", doc);\n  doc.forEach((item) => {\n    switch (item.stmt) {\n      case STMT_STATE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case DEFAULT_STATE_TYPE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case STMT_RELATION:\n        {\n          setupNode(g, parentParsedItem, item.state1, diagramStates, diagramDb, altFlag);\n          setupNode(g, parentParsedItem, item.state2, diagramStates, diagramDb, altFlag);\n          const edgeData = {\n            id: \"edge\" + graphItemCount,\n            arrowhead: \"normal\",\n            arrowTypeEnd: \"arrow_barb\",\n            style: G_EDGE_STYLE,\n            labelStyle: \"\",\n            label: common.sanitizeText(item.description, getConfig()),\n            arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n            labelpos: G_EDGE_LABELPOS,\n            labelType: G_EDGE_LABELTYPE,\n            thickness: G_EDGE_THICKNESS,\n            classes: CSS_EDGE\n          };\n          g.setEdge(item.state1.id, item.state2.id, edgeData, graphItemCount);\n          graphItemCount++;\n        }\n        break;\n    }\n  });\n};\nconst getDir = (parsedItem, defaultDir = DEFAULT_NESTED_DOC_DIR) => {\n  let dir = defaultDir;\n  if (parsedItem.doc) {\n    for (let i = 0; i < parsedItem.doc.length; i++) {\n      const parsedItemDoc = parsedItem.doc[i];\n      if (parsedItemDoc.stmt === \"dir\") {\n        dir = parsedItemDoc.value;\n      }\n    }\n  }\n  return dir;\n};\nconst draw = async function(text, id, _version, diag) {\n  log.info(\"Drawing state diagram (v2)\", id);\n  nodeDb = {};\n  diag.db.getDirection();\n  const { securityLevel, state: conf } = getConfig();\n  const nodeSpacing = conf.nodeSpacing || 50;\n  const rankSpacing = conf.rankSpacing || 50;\n  log.info(diag.db.getRootDocV2());\n  diag.db.extract(diag.db.getRootDocV2());\n  log.info(diag.db.getRootDocV2());\n  const diagramStates = diag.db.getStates();\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: getDir(diag.db.getRootDocV2()),\n    nodesep: nodeSpacing,\n    ranksep: rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  setupNode(g, void 0, diag.db.getRootDocV2(), diagramStates, diag.db, true);\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const svg = root.select(`[id=\"${id}\"]`);\n  const element = root.select(\"#\" + id + \" g\");\n  await render(element, g, [\"barb\"], CSS_DIAGRAM, id);\n  const padding = 8;\n  utils.insertTitle(svg, \"statediagramTitleText\", conf.titleTopMargin, diag.db.getDiagramTitle());\n  const bounds = svg.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n  svg.attr(\"class\", CSS_DIAGRAM);\n  const svgBounds = svg.node().getBBox();\n  configureSvgSize(svg, height, width, conf.useMaxWidth);\n  const vBox = `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`;\n  log.debug(`viewBox ${vBox}`);\n  svg.attr(\"viewBox\", vBox);\n  const labels = document.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n  for (const label of labels) {\n    const dim = label.getBBox();\n    const rect = document.createElementNS(\"http://www.w3.org/2000/svg\", SHAPE_STATE);\n    rect.setAttribute(\"rx\", 0);\n    rect.setAttribute(\"ry\", 0);\n    rect.setAttribute(\"width\", dim.width);\n    rect.setAttribute(\"height\", dim.height);\n    label.insertBefore(rect, label.firstChild);\n  }\n};\nconst renderer = {\n  setConf,\n  getClasses,\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","$28b09967c0dce656$export$6118d022d940d562","_ref","$hMcdm","$1t9cm","$76wyh","$ewvVJ","$Knj1d","$5GUWQ","$3GDLI","$28b09967c0dce656$var$SHAPE_STATE","$28b09967c0dce656$var$SHAPE_STATE_WITH_DESC","$28b09967c0dce656$var$CSS_DIAGRAM","$28b09967c0dce656$var$CSS_DIAGRAM_STATE","concat","$28b09967c0dce656$var$CSS_EDGE","$28b09967c0dce656$var$CSS_EDGE_NOTE_EDGE","$28b09967c0dce656$var$CSS_DIAGRAM_NOTE","$28b09967c0dce656$var$CSS_DIAGRAM_CLUSTER","$28b09967c0dce656$var$CSS_DIAGRAM_CLUSTER_ALT","$28b09967c0dce656$var$PARENT","$28b09967c0dce656$var$NOTE","$28b09967c0dce656$var$DOMID_TYPE_SPACER","$28b09967c0dce656$var$NOTE_ID","$28b09967c0dce656$var$PARENT_ID","$28b09967c0dce656$var$G_EDGE_STYLE","$28b09967c0dce656$var$G_EDGE_ARROWHEADSTYLE","$28b09967c0dce656$var$G_EDGE_LABELTYPE","$28b09967c0dce656$var$G_EDGE_THICKNESS","$28b09967c0dce656$var$nodeDb","$28b09967c0dce656$var$graphItemCount","$28b09967c0dce656$var$stateDomId","itemId","arguments","length","counter","type","typeSpacer","typeStr","$28b09967c0dce656$var$setupNode","g","parent","parsedItem","diagramStates","diagramDb","altFlag","dbInfoItem","id","classStr","classes","join","shape","start","D","description","sanitizeText","c","newNode","Array","isArray","push","sanitizeTextOrArray","doc","l","info","$28b09967c0dce656$var$getDir","dir","a","nodeData","labelStyle","labelText","style","domId","padding","centerLabel","note","noteData","text","groupData","parentNodeId","setNode","setParent","from","to","position","setEdge","arrowhead","arrowType","arrowheadStyle","labelpos","labelType","thickness","trace","$28b09967c0dce656$var$setupDoc","parentParsedItem","forEach","item","stmt","b","S","state1","state2","edgeData","arrowTypeEnd","label","defaultDir","i","parsedItemDoc","value","$28b09967c0dce656$var$draw","_","_version","diag","_getConfig","securityLevel","conf","nodeSpacing","rankSpacing","sandboxElement","root","svg","element","bounds","width","height","svgBounds","vBox","labels","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","dim","rect","__generator","_state","db","getDirection","state","getRootDocV2","extract","getStates","Graph","multigraph","compound","setGraph","rankdir","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","select","nodes","contentDocument","body","r","sent","u","insertTitle","titleTopMargin","getDiagramTitle","node","getBBox","attr","useMaxWidth","x","y","debug","document","querySelectorAll","undefined","Symbol","iterator","next","done","createElementNS","setAttribute","insertBefore","firstChild","err","return","apply","parser","p","d","renderer","setConf","cnf","keys","getClasses","diagramObj","draw","styles","init","arrowMarkerAbsolute","clear","$c48cff6abc2d2f72$export$2e2bcd8739ae039","$fCUSH","default"],"version":3,"file":"stateDiagram-v2-9a9d610d.0c646665.js.map"}