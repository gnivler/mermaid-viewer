function e(e,t,n,r){Object.defineProperty(e,t,{get:n,set:r,enumerable:!0,configurable:!0})}var t=("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{}).parcelRequiree2db,n=t.register;n("7twxt",function(n,r){e(n.exports,"r",function(){return O});var i=t("g4bpM"),l=t("b168C"),a=t("4LCvo"),d=t("sYKpE"),o=t("55XQZ"),s=t("9ivzg"),h=t("fMd7L");let g={},c={},f={},u=()=>{c={},f={},g={}},w=(e,t)=>((0,d.l).trace("In isDescendant",t," ",e," = ",c[t].includes(e)),!!c[t].includes(e)),p=(e,t)=>((0,d.l).info("Descendants of ",t," is ",c[t]),(0,d.l).info("Edge is ",e),e.v!==t&&e.w!==t&&(c[t]?c[t].includes(e.v)||w(e.v,t)||w(e.w,t)||c[t].includes(e.w):((0,d.l).debug("Tilt, ",t,",not in descendants"),!1))),v=(e,t,n,r)=>{(0,d.l).warn("Copying children of ",e,"root",r,"data",t.node(e),r);let i=t.children(e)||[];e!==r&&i.push(e),(0,d.l).warn("Copying (nodes) clusterId",e,"nodes",i),i.forEach(i=>{if(t.children(i).length>0)v(i,t,n,r);else{let l=t.node(i);(0,d.l).info("cp ",i," to ",r," with parent ",e),n.setNode(i,l),r!==t.parent(i)&&((0,d.l).warn("Setting parent",i,t.parent(i)),n.setParent(i,t.parent(i))),e!==r&&i!==e?((0,d.l).debug("Setting parent",i,e),n.setParent(i,e)):((0,d.l).info("In copy ",e,"root",r,"data",t.node(e),r),(0,d.l).debug("Not Setting parent for node=",i,"cluster!==rootId",e!==r,"node!==clusterId",i!==e));let a=t.edges(i);(0,d.l).debug("Copying Edges",a),a.forEach(i=>{(0,d.l).info("Edge",i);let l=t.edge(i.v,i.w,i.name);(0,d.l).info("Edge data",l,r);try{p(i,r)?((0,d.l).info("Copying as ",i.v,i.w,l,i.name),n.setEdge(i.v,i.w,l,i.name),(0,d.l).info("newGraph edges ",n.edges(),n.edge(n.edges()[0]))):(0,d.l).info("Skipping copy of edge ",i.v,"-->",i.w," rootId: ",r," clusterId:",e)}catch(e){(0,d.l).error(e)}})}(0,d.l).debug("Removing node",i),t.removeNode(i)})},y=(e,t)=>{let n=t.children(e),r=[...n];for(let i of n)f[i]=e,r=[...r,...y(i,t)];return r},b=(e,t)=>{(0,d.l).trace("Searching",e);let n=t.children(e);if((0,d.l).trace("Searching children of id ",e,n),n.length<1)return(0,d.l).trace("This is a valid node",e),e;for(let r of n){let n=b(r,t);if(n)return(0,d.l).trace("Found replacement for",e," => ",n),n}},x=e=>g[e]&&g[e].externalConnections&&g[e]?g[e].id:e,m=(e,t)=>{if(!e||t>10){(0,d.l).debug("Opting out, no graph ");return}for(let t of((0,d.l).debug("Opting in, graph "),e.nodes().forEach(function(t){e.children(t).length>0&&((0,d.l).warn("Cluster identified",t," Replacement id in edges: ",b(t,e)),c[t]=y(t,e),g[t]={id:b(t,e),clusterData:e.node(t)})}),e.nodes().forEach(function(t){let n=e.children(t),r=e.edges();n.length>0?((0,d.l).debug("Cluster identified",t,c),r.forEach(e=>{e.v!==t&&e.w!==t&&w(e.v,t)^w(e.w,t)&&((0,d.l).warn("Edge: ",e," leaves cluster ",t),(0,d.l).warn("Descendants of XXX ",t,": ",c[t]),g[t].externalConnections=!0)})):(0,d.l).debug("Not a cluster ",t,c)}),Object.keys(g))){let n=g[t].id,r=e.parent(n);r!==t&&g[r]&&!g[r].externalConnections&&(g[t].id=r)}e.edges().forEach(function(t){let n=e.edge(t);(0,d.l).warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(t)),(0,d.l).warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(e.edge(t)));let r=t.v,i=t.w;if((0,d.l).warn("Fix XXX",g,"ids:",t.v,t.w,"Translating: ",g[t.v]," --- ",g[t.w]),g[t.v]&&g[t.w]&&g[t.v]===g[t.w]){(0,d.l).warn("Fixing and trixing link to self - removing XXX",t.v,t.w,t.name),(0,d.l).warn("Fixing and trixing - removing XXX",t.v,t.w,t.name),r=x(t.v),i=x(t.w),e.removeEdge(t.v,t.w,t.name);let l=t.w+"---"+t.v;e.setNode(l,{domId:l,id:l,labelStyle:"",labelText:n.label,padding:0,shape:"labelRect",style:""});let a=structuredClone(n),o=structuredClone(n);a.label="",a.arrowTypeEnd="none",o.label="",a.fromCluster=t.v,o.toCluster=t.v,e.setEdge(r,l,a,t.name+"-cyclic-special"),e.setEdge(l,i,o,t.name+"-cyclic-special")}else(g[t.v]||g[t.w])&&((0,d.l).warn("Fixing and trixing - removing XXX",t.v,t.w,t.name),r=x(t.v),i=x(t.w),e.removeEdge(t.v,t.w,t.name),r!==t.v&&(g[e.parent(r)].externalConnections=!0,n.fromCluster=t.v),i!==t.w&&(g[e.parent(i)].externalConnections=!0,n.toCluster=t.w),(0,d.l).warn("Fix Replacing with XXX",r,i,t.name),e.setEdge(r,i,n,t.name))}),(0,d.l).warn("Adjusted Graph",l.write(e)),C(e,0),(0,d.l).trace(g)},C=(e,t)=>{if((0,d.l).warn("extractor - ",t,l.write(e),e.children("D")),t>10){(0,d.l).error("Bailing out");return}let n=e.nodes(),r=!1;for(let t of n){let n=e.children(t);r=r||n.length>0}if(!r){(0,d.l).debug("Done, no node has children",e.nodes());return}for(let r of((0,d.l).debug("Nodes = ",n,t),n))if((0,d.l).debug("Extracting node",r,g,g[r]&&!g[r].externalConnections,!e.parent(r),e.node(r),e.children("D")," Depth ",t),g[r]){if(!g[r].externalConnections&&e.children(r)&&e.children(r).length>0){(0,d.l).warn("Cluster without external connections, without a parent and with children",r,t);let n="TB"===e.graph().rankdir?"LR":"TB";g[r]&&g[r].clusterData&&g[r].clusterData.dir&&(n=g[r].clusterData.dir,(0,d.l).warn("Fixing dir",g[r].clusterData.dir,n));let i=new o.Graph({multigraph:!0,compound:!0}).setGraph({rankdir:n,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}});(0,d.l).warn("Old graph before copy",l.write(e)),v(r,e,i,r),e.setNode(r,{clusterNode:!0,id:r,clusterData:g[r].clusterData,labelText:g[r].labelText,graph:i}),(0,d.l).warn("New graph after copy node: (",r,")",l.write(i)),(0,d.l).debug("Old graph after copy",l.write(e))}else(0,d.l).warn("Cluster ** ",r," **not meeting the criteria !externalConnections:",!g[r].externalConnections," no parent: ",!e.parent(r)," children ",e.children(r)&&e.children(r).length>0,e.children("D"),t),(0,d.l).debug(g)}else(0,d.l).debug("Not a cluster",r,t);for(let r of(n=e.nodes(),(0,d.l).warn("New list of nodes",n),n)){let n=e.node(r);(0,d.l).warn(" Now next level",r,n),n.clusterNode&&C(n.graph,t+1)}},E=(e,t)=>{if(0===t.length)return[];let n=Object.assign(t);return t.forEach(t=>{let r=e.children(t),i=E(e,r);n=[...n,...i]}),n},X=e=>E(e,e.children()),N={rect:(e,t)=>{(0,d.l).info("Creating subgraph rect for ",t.id,t);let n=(0,d.c)(),r=e.insert("g").attr("class","cluster"+(t.class?" "+t.class:"")).attr("id",t.id),i=r.insert("rect",":first-child"),l=(0,d.m)(n.flowchart.htmlLabels),o=r.insert("g").attr("class","cluster-label"),g="markdown"===t.labelType?(0,s.a)(o,t.labelText,{style:t.labelStyle,useHtmlLabels:l}):o.node().appendChild((0,a.c)(t.labelText,t.labelStyle,void 0,!0)),c=g.getBBox();if((0,d.m)(n.flowchart.htmlLabels)){let e=g.children[0],t=(0,h.select)(g);c=e.getBoundingClientRect(),t.attr("width",c.width),t.attr("height",c.height)}let f=0*t.padding,u=t.width<=c.width+f?c.width+f:t.width;t.width<=c.width+f?t.diff=(c.width-t.width)/2-t.padding/2:t.diff=-t.padding/2,(0,d.l).trace("Data ",t,JSON.stringify(t)),i.attr("style",t.style).attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-u/2).attr("y",t.y-t.height/2-f/2).attr("width",u).attr("height",t.height+f);let{subGraphTitleTopMargin:w}=(0,a.g)(n);l?o.attr("transform",`translate(${t.x-c.width/2}, ${t.y-t.height/2+w})`):o.attr("transform",`translate(${t.x}, ${t.y-t.height/2+w})`);let p=i.node().getBBox();return t.width=p.width,t.height=p.height,t.intersect=function(e){return(0,a.i)(t,e)},r},roundedWithTitle:(e,t)=>{let n=(0,d.c)(),r=e.insert("g").attr("class",t.classes).attr("id",t.id),i=r.insert("rect",":first-child"),l=r.insert("g").attr("class","cluster-label"),o=r.append("rect"),s=l.node().appendChild((0,a.c)(t.labelText,t.labelStyle,void 0,!0)),g=s.getBBox();if((0,d.m)(n.flowchart.htmlLabels)){let e=s.children[0],t=(0,h.select)(s);g=e.getBoundingClientRect(),t.attr("width",g.width),t.attr("height",g.height)}g=s.getBBox();let c=0*t.padding,f=c/2,u=t.width<=g.width+t.padding?g.width+t.padding:t.width;t.width<=g.width+t.padding?t.diff=(g.width+0*t.padding-t.width)/2:t.diff=-t.padding/2,i.attr("class","outer").attr("x",t.x-u/2-f).attr("y",t.y-t.height/2-f).attr("width",u+c).attr("height",t.height+c),o.attr("class","inner").attr("x",t.x-u/2-f).attr("y",t.y-t.height/2-f+g.height-1).attr("width",u+c).attr("height",t.height+c-g.height-3);let{subGraphTitleTopMargin:w}=(0,a.g)(n);l.attr("transform",`translate(${t.x-g.width/2}, ${t.y-t.height/2-t.padding/3+((0,d.m)(n.flowchart.htmlLabels)?5:3)+w})`);let p=i.node().getBBox();return t.height=p.height,t.intersect=function(e){return(0,a.i)(t,e)},r},noteGroup:(e,t)=>{let n=e.insert("g").attr("class","note-cluster").attr("id",t.id),r=n.insert("rect",":first-child"),i=0*t.padding,l=i/2;r.attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-t.width/2-l).attr("y",t.y-t.height/2-l).attr("width",t.width+i).attr("height",t.height+i).attr("fill","none");let d=r.node().getBBox();return t.width=d.width,t.height=d.height,t.intersect=function(e){return(0,a.i)(t,e)},n},divider:(e,t)=>{let n=e.insert("g").attr("class",t.classes).attr("id",t.id),r=n.insert("rect",":first-child"),i=0*t.padding;r.attr("class","divider").attr("x",t.x-t.width/2-i/2).attr("y",t.y-t.height/2).attr("width",t.width+i).attr("height",t.height+i);let l=r.node().getBBox();return t.width=l.width,t.height=l.height,t.diff=-t.padding/2,t.intersect=function(e){return(0,a.i)(t,e)},n}},S={},T=(e,t)=>{(0,d.l).trace("Inserting cluster");let n=t.shape||"rect";S[t.id]=N[n](e,t)},B=()=>{S={}},D=async(e,t,n,r,o,s)=>{(0,d.l).info("Graph in recursive render: XXX",l.write(t),o);let h=t.graph().rankdir;(0,d.l).trace("Dir in recursive render - dir:",h);let c=e.insert("g").attr("class","root");t.nodes()?(0,d.l).info("Recursive render XXX",t.nodes()):(0,d.l).info("No nodes found for",t),t.edges().length>0&&(0,d.l).trace("Recursive edges",t.edge(t.edges()[0]));let f=c.insert("g").attr("class","clusters"),u=c.insert("g").attr("class","edgePaths"),w=c.insert("g").attr("class","edgeLabels"),p=c.insert("g").attr("class","nodes");await Promise.all(t.nodes().map(async function(e){let i=t.node(e);if(void 0!==o){let n=JSON.parse(JSON.stringify(o.clusterData));(0,d.l).info("Setting data for cluster XXX (",e,") ",n,o),t.setNode(o.id,n),t.parent(e)||((0,d.l).trace("Setting parent",e,o.id),t.setParent(e,o.id,n))}if((0,d.l).info("(Insert) Node XXX"+e+": "+JSON.stringify(t.node(e))),i&&i.clusterNode){(0,d.l).info("Cluster identified",e,i.width,t.node(e));let l=await D(p,i.graph,n,r,t.node(e),s),o=l.elem;(0,a.u)(i,o),i.diff=l.diff||0,(0,d.l).info("Node bounds (abc123)",e,i,i.width,i.x,i.y),(0,a.s)(o,i),(0,d.l).warn("Recursive render complete ",o,i)}else t.children(e).length>0?((0,d.l).info("Cluster - the non recursive path XXX",e,i.id,i,t),(0,d.l).info(b(i.id,t)),g[i.id]={id:b(i.id,t),node:i}):((0,d.l).info("Node - the non recursive path",e,i.id,i),await (0,a.e)(p,t.node(e),h))})),t.edges().forEach(function(e){let n=t.edge(e.v,e.w,e.name);(0,d.l).info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),(0,d.l).info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(t.edge(e))),(0,d.l).info("Fix",g,"ids:",e.v,e.w,"Translating: ",g[e.v],g[e.w]),(0,a.f)(w,n)}),t.edges().forEach(function(e){(0,d.l).info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e))}),(0,d.l).info("#############################################"),(0,d.l).info("###                Layout                 ###"),(0,d.l).info("#############################################"),(0,d.l).info(t),(0,i.layout)(t),(0,d.l).info("Graph after layout:",l.write(t));let v=0,{subGraphTitleTotalMargin:y}=(0,a.g)(s);return X(t).forEach(function(e){let n=t.node(e);(0,d.l).info("Position "+e+": "+JSON.stringify(t.node(e))),(0,d.l).info("Position "+e+": ("+n.x,","+n.y,") width: ",n.width," height: ",n.height),n&&n.clusterNode?(n.y+=y,(0,a.p)(n)):t.children(e).length>0?(n.height+=y,T(f,n),g[n.id].node=n):(n.y+=y/2,(0,a.p)(n))}),t.edges().forEach(function(e){let i=t.edge(e);(0,d.l).info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(i),i),i.points.forEach(e=>e.y+=y/2);let l=(0,a.h)(u,e,i,g,n,t,r);(0,a.j)(i,l)}),t.nodes().forEach(function(e){let n=t.node(e);(0,d.l).info(e,n.type,n.diff),"group"===n.type&&(v=n.diff)}),{elem:c,diff:v}},O=async(e,t,n,r,i)=>{(0,a.a)(e,n,r,i),(0,a.b)(),(0,a.d)(),B(),u(),(0,d.l).warn("Graph at first:",JSON.stringify(l.write(t))),m(t),(0,d.l).warn("Graph after:",JSON.stringify(l.write(t)));let o=(0,d.c)();await D(e,t,r,i,void 0,o)}}),n("b168C",function(n,r){e(n.exports,"write",function(){return d});var i=t("22J6r");t("4QaAL");var l=t("gn2on"),a=t("2fY0B");function d(e){var t={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:a.default(e.nodes(),function(t){var n=e.node(t),r=e.parent(t),i={v:t};return l.default(n)||(i.value=n),l.default(r)||(i.parent=r),i}),edges:a.default(e.edges(),function(t){var n=e.edge(t),r={v:t.v,w:t.w};return l.default(t.name)||(r.name=t.name),l.default(n)||(r.value=n),r})};return l.default(e.graph())||(t.value=i.default(e.graph())),t}t("iZ4UW")});
//# sourceMappingURL=flowDiagram-5540d9b9.5670e560.js.map
